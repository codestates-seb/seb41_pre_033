spring:
#  config:
#    activate:
#      on-profile: server
  #    import: 'aws-parameterstore:'
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    database: mysql
    hibernate:
      ddl-auto: update  # create, update, validate, none
    show-sql: true      # (2) SQL 쿼리 출력
    properties:
      hibernate:
        format_sql: true  # (3) SQL pretty print
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
logging:
  level:
    org:
      springframework:
        orm:
          jpa: DEBUG
server:
  port: 8080
  servlet:
    encoding:
      force-response: true
jwt:
  key: ${JWT_SECRET_KEY}
  access-token-expiration-minutes: 40
  refresh-token-expiration-minutes: 420
#aws:
#  paramstore:
#    enabled: true
#    prefix: stackoverflow
#    name: pre-project
#    profileSeparator: _

## 로컬 환경에서 사용하는 정보들은 application-local.yml 파일에 설정합니다.
#spring:
#  h2:
#    console:
#      enabled: true
#      path: /h2
#  datasource:
#    url: jdbc:h2:mem:test
#  jpa:
#    hibernate:
#      ddl-auto: create  # (1) 스키마 자동 생성
#    show-sql: true      # (2) SQL 쿼리 출력
#    properties:
#      hibernate:
#        format_sql: true  # (3) SQL pretty print
#  mvc:
#    pathmatch:
#      matching-strategy: ant_path_matcher
#  mail:
#    host: smtp.gmail.com
#    port: 587
#    username: ggammancj@gmail.com
#    password: ckneqcxipnfurbgb
#    properties:
#      mail:
#        smtp:
#          auth: true
#          starttls:
#            enable: true
#
##  sql:
##    init:
##      data-locations: classpath*:db/h2/data.sql
#logging:
#  level:
#    org:
#      springframework:
#        orm:
#          jpa: DEBUG
#server:
#  servlet:
#    encoding:
#      force-response: true
#jwt:
#  key: ${JWT_SECRET_KEY}
#  access-token-expiration-minutes: 40
#  refresh-token-expiration-minutes: 420